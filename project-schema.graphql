schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "identity.parties"
"""
type identity_parties {
  created_at: timestamptz
  first_name: String!
  idp_id: String!
  last_name: String!

  """
  A computed field, executes function "identity.party_full_name"
  """
  name: String
  party_id: Int!

  """An array relationship"""
  party_roles(
    """distinct select on columns"""
    distinct_on: [identity_party_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_party_roles_order_by!]

    """filter the rows returned"""
    where: identity_party_roles_bool_exp
  ): [identity_party_roles!]!

  """An aggregate relationship"""
  party_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_party_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_party_roles_order_by!]

    """filter the rows returned"""
    where: identity_party_roles_bool_exp
  ): identity_party_roles_aggregate!

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!
  updated_at: timestamptz
}

"""
aggregated selection of "identity.parties"
"""
type identity_parties_aggregate {
  aggregate: identity_parties_aggregate_fields
  nodes: [identity_parties!]!
}

"""
aggregate fields of "identity.parties"
"""
type identity_parties_aggregate_fields {
  avg: identity_parties_avg_fields
  count(columns: [identity_parties_select_column!], distinct: Boolean): Int!
  max: identity_parties_max_fields
  min: identity_parties_min_fields
  stddev: identity_parties_stddev_fields
  stddev_pop: identity_parties_stddev_pop_fields
  stddev_samp: identity_parties_stddev_samp_fields
  sum: identity_parties_sum_fields
  var_pop: identity_parties_var_pop_fields
  var_samp: identity_parties_var_samp_fields
  variance: identity_parties_variance_fields
}

"""aggregate avg on columns"""
type identity_parties_avg_fields {
  party_id: Float
}

"""
Boolean expression to filter rows from the table "identity.parties". All fields are combined with a logical 'AND'.
"""
input identity_parties_bool_exp {
  _and: [identity_parties_bool_exp!]
  _not: identity_parties_bool_exp
  _or: [identity_parties_bool_exp!]
  created_at: timestamptz_comparison_exp
  first_name: String_comparison_exp
  idp_id: String_comparison_exp
  last_name: String_comparison_exp
  name: String_comparison_exp
  party_id: Int_comparison_exp
  party_roles: identity_party_roles_bool_exp
  party_roles_aggregate: identity_party_roles_aggregate_bool_exp
  projects: projects_bool_exp
  projects_aggregate: projects_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "identity.parties"
"""
enum identity_parties_constraint {
  """
  unique or primary key constraint on columns "party_id"
  """
  parties_pkey
}

"""
input type for incrementing numeric columns in table "identity.parties"
"""
input identity_parties_inc_input {
  party_id: Int
}

"""
input type for inserting data into table "identity.parties"
"""
input identity_parties_insert_input {
  created_at: timestamptz
  first_name: String
  idp_id: String
  last_name: String
  party_id: Int
  party_roles: identity_party_roles_arr_rel_insert_input
  projects: projects_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type identity_parties_max_fields {
  created_at: timestamptz
  first_name: String
  idp_id: String
  last_name: String

  """
  A computed field, executes function "identity.party_full_name"
  """
  name: String
  party_id: Int
  updated_at: timestamptz
}

"""aggregate min on columns"""
type identity_parties_min_fields {
  created_at: timestamptz
  first_name: String
  idp_id: String
  last_name: String

  """
  A computed field, executes function "identity.party_full_name"
  """
  name: String
  party_id: Int
  updated_at: timestamptz
}

"""
response of any mutation on the table "identity.parties"
"""
type identity_parties_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [identity_parties!]!
}

"""
input type for inserting object relation for remote table "identity.parties"
"""
input identity_parties_obj_rel_insert_input {
  data: identity_parties_insert_input!

  """upsert condition"""
  on_conflict: identity_parties_on_conflict
}

"""
on_conflict condition type for table "identity.parties"
"""
input identity_parties_on_conflict {
  constraint: identity_parties_constraint!
  update_columns: [identity_parties_update_column!]! = []
  where: identity_parties_bool_exp
}

"""Ordering options when selecting data from "identity.parties"."""
input identity_parties_order_by {
  created_at: order_by
  first_name: order_by
  idp_id: order_by
  last_name: order_by
  name: order_by
  party_id: order_by
  party_roles_aggregate: identity_party_roles_aggregate_order_by
  projects_aggregate: projects_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: identity.parties"""
input identity_parties_pk_columns_input {
  party_id: Int!
}

"""
select columns of table "identity.parties"
"""
enum identity_parties_select_column {
  """column name"""
  created_at

  """column name"""
  first_name

  """column name"""
  idp_id

  """column name"""
  last_name

  """column name"""
  party_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "identity.parties"
"""
input identity_parties_set_input {
  created_at: timestamptz
  first_name: String
  idp_id: String
  last_name: String
  party_id: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type identity_parties_stddev_fields {
  party_id: Float
}

"""aggregate stddev_pop on columns"""
type identity_parties_stddev_pop_fields {
  party_id: Float
}

"""aggregate stddev_samp on columns"""
type identity_parties_stddev_samp_fields {
  party_id: Float
}

"""
Streaming cursor of the table "identity_parties"
"""
input identity_parties_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: identity_parties_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input identity_parties_stream_cursor_value_input {
  created_at: timestamptz
  first_name: String
  idp_id: String
  last_name: String
  party_id: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type identity_parties_sum_fields {
  party_id: Int
}

"""
update columns of table "identity.parties"
"""
enum identity_parties_update_column {
  """column name"""
  created_at

  """column name"""
  first_name

  """column name"""
  idp_id

  """column name"""
  last_name

  """column name"""
  party_id

  """column name"""
  updated_at
}

input identity_parties_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: identity_parties_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: identity_parties_set_input

  """filter the rows which have to be updated"""
  where: identity_parties_bool_exp!
}

"""aggregate var_pop on columns"""
type identity_parties_var_pop_fields {
  party_id: Float
}

"""aggregate var_samp on columns"""
type identity_parties_var_samp_fields {
  party_id: Float
}

"""aggregate variance on columns"""
type identity_parties_variance_fields {
  party_id: Float
}

"""
columns and relationships of "identity.party_roles"
"""
type identity_party_roles {
  created_at: timestamptz

  """An object relationship"""
  party: identity_parties!
  party_id: Int!
  party_role_id: Int!

  """An object relationship"""
  role_type: identity_role_type!
  role_type_id: identity_role_type_enum!
  updated_at: timestamptz
}

"""
aggregated selection of "identity.party_roles"
"""
type identity_party_roles_aggregate {
  aggregate: identity_party_roles_aggregate_fields
  nodes: [identity_party_roles!]!
}

input identity_party_roles_aggregate_bool_exp {
  count: identity_party_roles_aggregate_bool_exp_count
}

input identity_party_roles_aggregate_bool_exp_count {
  arguments: [identity_party_roles_select_column!]
  distinct: Boolean
  filter: identity_party_roles_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "identity.party_roles"
"""
type identity_party_roles_aggregate_fields {
  avg: identity_party_roles_avg_fields
  count(columns: [identity_party_roles_select_column!], distinct: Boolean): Int!
  max: identity_party_roles_max_fields
  min: identity_party_roles_min_fields
  stddev: identity_party_roles_stddev_fields
  stddev_pop: identity_party_roles_stddev_pop_fields
  stddev_samp: identity_party_roles_stddev_samp_fields
  sum: identity_party_roles_sum_fields
  var_pop: identity_party_roles_var_pop_fields
  var_samp: identity_party_roles_var_samp_fields
  variance: identity_party_roles_variance_fields
}

"""
order by aggregate values of table "identity.party_roles"
"""
input identity_party_roles_aggregate_order_by {
  avg: identity_party_roles_avg_order_by
  count: order_by
  max: identity_party_roles_max_order_by
  min: identity_party_roles_min_order_by
  stddev: identity_party_roles_stddev_order_by
  stddev_pop: identity_party_roles_stddev_pop_order_by
  stddev_samp: identity_party_roles_stddev_samp_order_by
  sum: identity_party_roles_sum_order_by
  var_pop: identity_party_roles_var_pop_order_by
  var_samp: identity_party_roles_var_samp_order_by
  variance: identity_party_roles_variance_order_by
}

"""
input type for inserting array relation for remote table "identity.party_roles"
"""
input identity_party_roles_arr_rel_insert_input {
  data: [identity_party_roles_insert_input!]!

  """upsert condition"""
  on_conflict: identity_party_roles_on_conflict
}

"""aggregate avg on columns"""
type identity_party_roles_avg_fields {
  party_id: Float
  party_role_id: Float
}

"""
order by avg() on columns of table "identity.party_roles"
"""
input identity_party_roles_avg_order_by {
  party_id: order_by
  party_role_id: order_by
}

"""
Boolean expression to filter rows from the table "identity.party_roles". All fields are combined with a logical 'AND'.
"""
input identity_party_roles_bool_exp {
  _and: [identity_party_roles_bool_exp!]
  _not: identity_party_roles_bool_exp
  _or: [identity_party_roles_bool_exp!]
  created_at: timestamptz_comparison_exp
  party: identity_parties_bool_exp
  party_id: Int_comparison_exp
  party_role_id: Int_comparison_exp
  role_type: identity_role_type_bool_exp
  role_type_id: identity_role_type_enum_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "identity.party_roles"
"""
enum identity_party_roles_constraint {
  """
  unique or primary key constraint on columns "party_role_id"
  """
  party_roles_pkey
}

"""
input type for incrementing numeric columns in table "identity.party_roles"
"""
input identity_party_roles_inc_input {
  party_id: Int
  party_role_id: Int
}

"""
input type for inserting data into table "identity.party_roles"
"""
input identity_party_roles_insert_input {
  created_at: timestamptz
  party: identity_parties_obj_rel_insert_input
  party_id: Int
  party_role_id: Int
  role_type: identity_role_type_obj_rel_insert_input
  role_type_id: identity_role_type_enum
  updated_at: timestamptz
}

"""aggregate max on columns"""
type identity_party_roles_max_fields {
  created_at: timestamptz
  party_id: Int
  party_role_id: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "identity.party_roles"
"""
input identity_party_roles_max_order_by {
  created_at: order_by
  party_id: order_by
  party_role_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type identity_party_roles_min_fields {
  created_at: timestamptz
  party_id: Int
  party_role_id: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "identity.party_roles"
"""
input identity_party_roles_min_order_by {
  created_at: order_by
  party_id: order_by
  party_role_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "identity.party_roles"
"""
type identity_party_roles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [identity_party_roles!]!
}

"""
input type for inserting object relation for remote table "identity.party_roles"
"""
input identity_party_roles_obj_rel_insert_input {
  data: identity_party_roles_insert_input!

  """upsert condition"""
  on_conflict: identity_party_roles_on_conflict
}

"""
on_conflict condition type for table "identity.party_roles"
"""
input identity_party_roles_on_conflict {
  constraint: identity_party_roles_constraint!
  update_columns: [identity_party_roles_update_column!]! = []
  where: identity_party_roles_bool_exp
}

"""Ordering options when selecting data from "identity.party_roles"."""
input identity_party_roles_order_by {
  created_at: order_by
  party: identity_parties_order_by
  party_id: order_by
  party_role_id: order_by
  role_type: identity_role_type_order_by
  role_type_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: identity.party_roles"""
input identity_party_roles_pk_columns_input {
  party_role_id: Int!
}

"""
select columns of table "identity.party_roles"
"""
enum identity_party_roles_select_column {
  """column name"""
  created_at

  """column name"""
  party_id

  """column name"""
  party_role_id

  """column name"""
  role_type_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "identity.party_roles"
"""
input identity_party_roles_set_input {
  created_at: timestamptz
  party_id: Int
  party_role_id: Int
  role_type_id: identity_role_type_enum
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type identity_party_roles_stddev_fields {
  party_id: Float
  party_role_id: Float
}

"""
order by stddev() on columns of table "identity.party_roles"
"""
input identity_party_roles_stddev_order_by {
  party_id: order_by
  party_role_id: order_by
}

"""aggregate stddev_pop on columns"""
type identity_party_roles_stddev_pop_fields {
  party_id: Float
  party_role_id: Float
}

"""
order by stddev_pop() on columns of table "identity.party_roles"
"""
input identity_party_roles_stddev_pop_order_by {
  party_id: order_by
  party_role_id: order_by
}

"""aggregate stddev_samp on columns"""
type identity_party_roles_stddev_samp_fields {
  party_id: Float
  party_role_id: Float
}

"""
order by stddev_samp() on columns of table "identity.party_roles"
"""
input identity_party_roles_stddev_samp_order_by {
  party_id: order_by
  party_role_id: order_by
}

"""
Streaming cursor of the table "identity_party_roles"
"""
input identity_party_roles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: identity_party_roles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input identity_party_roles_stream_cursor_value_input {
  created_at: timestamptz
  party_id: Int
  party_role_id: Int
  role_type_id: identity_role_type_enum
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type identity_party_roles_sum_fields {
  party_id: Int
  party_role_id: Int
}

"""
order by sum() on columns of table "identity.party_roles"
"""
input identity_party_roles_sum_order_by {
  party_id: order_by
  party_role_id: order_by
}

"""
update columns of table "identity.party_roles"
"""
enum identity_party_roles_update_column {
  """column name"""
  created_at

  """column name"""
  party_id

  """column name"""
  party_role_id

  """column name"""
  role_type_id

  """column name"""
  updated_at
}

input identity_party_roles_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: identity_party_roles_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: identity_party_roles_set_input

  """filter the rows which have to be updated"""
  where: identity_party_roles_bool_exp!
}

"""aggregate var_pop on columns"""
type identity_party_roles_var_pop_fields {
  party_id: Float
  party_role_id: Float
}

"""
order by var_pop() on columns of table "identity.party_roles"
"""
input identity_party_roles_var_pop_order_by {
  party_id: order_by
  party_role_id: order_by
}

"""aggregate var_samp on columns"""
type identity_party_roles_var_samp_fields {
  party_id: Float
  party_role_id: Float
}

"""
order by var_samp() on columns of table "identity.party_roles"
"""
input identity_party_roles_var_samp_order_by {
  party_id: order_by
  party_role_id: order_by
}

"""aggregate variance on columns"""
type identity_party_roles_variance_fields {
  party_id: Float
  party_role_id: Float
}

"""
order by variance() on columns of table "identity.party_roles"
"""
input identity_party_roles_variance_order_by {
  party_id: order_by
  party_role_id: order_by
}

"""
columns and relationships of "identity.role_type"
"""
type identity_role_type {
  description: String!

  """An array relationship"""
  party_roles(
    """distinct select on columns"""
    distinct_on: [identity_party_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_party_roles_order_by!]

    """filter the rows returned"""
    where: identity_party_roles_bool_exp
  ): [identity_party_roles!]!

  """An aggregate relationship"""
  party_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_party_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_party_roles_order_by!]

    """filter the rows returned"""
    where: identity_party_roles_bool_exp
  ): identity_party_roles_aggregate!
  value: String!
}

"""
aggregated selection of "identity.role_type"
"""
type identity_role_type_aggregate {
  aggregate: identity_role_type_aggregate_fields
  nodes: [identity_role_type!]!
}

"""
aggregate fields of "identity.role_type"
"""
type identity_role_type_aggregate_fields {
  count(columns: [identity_role_type_select_column!], distinct: Boolean): Int!
  max: identity_role_type_max_fields
  min: identity_role_type_min_fields
}

"""
Boolean expression to filter rows from the table "identity.role_type". All fields are combined with a logical 'AND'.
"""
input identity_role_type_bool_exp {
  _and: [identity_role_type_bool_exp!]
  _not: identity_role_type_bool_exp
  _or: [identity_role_type_bool_exp!]
  description: String_comparison_exp
  party_roles: identity_party_roles_bool_exp
  party_roles_aggregate: identity_party_roles_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "identity.role_type"
"""
enum identity_role_type_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  role_type_pkey
}

enum identity_role_type_enum {
  """Administrator"""
  Administrator

  """Developer"""
  Developer

  """Project Lead"""
  ProjectLead
}

"""
Boolean expression to compare columns of type "identity_role_type_enum". All fields are combined with logical 'AND'.
"""
input identity_role_type_enum_comparison_exp {
  _eq: identity_role_type_enum
  _in: [identity_role_type_enum!]
  _is_null: Boolean
  _neq: identity_role_type_enum
  _nin: [identity_role_type_enum!]
}

"""
input type for inserting data into table "identity.role_type"
"""
input identity_role_type_insert_input {
  description: String
  party_roles: identity_party_roles_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type identity_role_type_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type identity_role_type_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "identity.role_type"
"""
type identity_role_type_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [identity_role_type!]!
}

"""
input type for inserting object relation for remote table "identity.role_type"
"""
input identity_role_type_obj_rel_insert_input {
  data: identity_role_type_insert_input!

  """upsert condition"""
  on_conflict: identity_role_type_on_conflict
}

"""
on_conflict condition type for table "identity.role_type"
"""
input identity_role_type_on_conflict {
  constraint: identity_role_type_constraint!
  update_columns: [identity_role_type_update_column!]! = []
  where: identity_role_type_bool_exp
}

"""Ordering options when selecting data from "identity.role_type"."""
input identity_role_type_order_by {
  description: order_by
  party_roles_aggregate: identity_party_roles_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: identity.role_type"""
input identity_role_type_pk_columns_input {
  value: String!
}

"""
select columns of table "identity.role_type"
"""
enum identity_role_type_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "identity.role_type"
"""
input identity_role_type_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "identity_role_type"
"""
input identity_role_type_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: identity_role_type_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input identity_role_type_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "identity.role_type"
"""
enum identity_role_type_update_column {
  """column name"""
  description

  """column name"""
  value
}

input identity_role_type_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: identity_role_type_set_input

  """filter the rows which have to be updated"""
  where: identity_role_type_bool_exp!
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "identity.parties"
  """
  delete_identity_parties(
    """filter the rows which have to be deleted"""
    where: identity_parties_bool_exp!
  ): identity_parties_mutation_response

  """
  delete single row from the table: "identity.parties"
  """
  delete_identity_parties_by_pk(party_id: Int!): identity_parties

  """
  delete data from the table: "identity.party_roles"
  """
  delete_identity_party_roles(
    """filter the rows which have to be deleted"""
    where: identity_party_roles_bool_exp!
  ): identity_party_roles_mutation_response

  """
  delete single row from the table: "identity.party_roles"
  """
  delete_identity_party_roles_by_pk(party_role_id: Int!): identity_party_roles

  """
  delete data from the table: "identity.role_type"
  """
  delete_identity_role_type(
    """filter the rows which have to be deleted"""
    where: identity_role_type_bool_exp!
  ): identity_role_type_mutation_response

  """
  delete single row from the table: "identity.role_type"
  """
  delete_identity_role_type_by_pk(value: String!): identity_role_type

  """
  delete data from the table: "project_assignments"
  """
  delete_project_assignments(
    """filter the rows which have to be deleted"""
    where: project_assignments_bool_exp!
  ): project_assignments_mutation_response

  """
  delete single row from the table: "project_assignments"
  """
  delete_project_assignments_by_pk(party_role_id: Int!, project_id: Int!): project_assignments

  """
  delete data from the table: "project_status"
  """
  delete_project_status(
    """filter the rows which have to be deleted"""
    where: project_status_bool_exp!
  ): project_status_mutation_response

  """
  delete single row from the table: "project_status"
  """
  delete_project_status_by_pk(value: String!): project_status

  """
  delete data from the table: "projects"
  """
  delete_projects(
    """filter the rows which have to be deleted"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  delete single row from the table: "projects"
  """
  delete_projects_by_pk(id: Int!): projects

  """
  insert data into the table: "identity.parties"
  """
  insert_identity_parties(
    """the rows to be inserted"""
    objects: [identity_parties_insert_input!]!

    """upsert condition"""
    on_conflict: identity_parties_on_conflict
  ): identity_parties_mutation_response

  """
  insert a single row into the table: "identity.parties"
  """
  insert_identity_parties_one(
    """the row to be inserted"""
    object: identity_parties_insert_input!

    """upsert condition"""
    on_conflict: identity_parties_on_conflict
  ): identity_parties

  """
  insert data into the table: "identity.party_roles"
  """
  insert_identity_party_roles(
    """the rows to be inserted"""
    objects: [identity_party_roles_insert_input!]!

    """upsert condition"""
    on_conflict: identity_party_roles_on_conflict
  ): identity_party_roles_mutation_response

  """
  insert a single row into the table: "identity.party_roles"
  """
  insert_identity_party_roles_one(
    """the row to be inserted"""
    object: identity_party_roles_insert_input!

    """upsert condition"""
    on_conflict: identity_party_roles_on_conflict
  ): identity_party_roles

  """
  insert data into the table: "identity.role_type"
  """
  insert_identity_role_type(
    """the rows to be inserted"""
    objects: [identity_role_type_insert_input!]!

    """upsert condition"""
    on_conflict: identity_role_type_on_conflict
  ): identity_role_type_mutation_response

  """
  insert a single row into the table: "identity.role_type"
  """
  insert_identity_role_type_one(
    """the row to be inserted"""
    object: identity_role_type_insert_input!

    """upsert condition"""
    on_conflict: identity_role_type_on_conflict
  ): identity_role_type

  """
  insert data into the table: "project_assignments"
  """
  insert_project_assignments(
    """the rows to be inserted"""
    objects: [project_assignments_insert_input!]!

    """upsert condition"""
    on_conflict: project_assignments_on_conflict
  ): project_assignments_mutation_response

  """
  insert a single row into the table: "project_assignments"
  """
  insert_project_assignments_one(
    """the row to be inserted"""
    object: project_assignments_insert_input!

    """upsert condition"""
    on_conflict: project_assignments_on_conflict
  ): project_assignments

  """
  insert data into the table: "project_status"
  """
  insert_project_status(
    """the rows to be inserted"""
    objects: [project_status_insert_input!]!

    """upsert condition"""
    on_conflict: project_status_on_conflict
  ): project_status_mutation_response

  """
  insert a single row into the table: "project_status"
  """
  insert_project_status_one(
    """the row to be inserted"""
    object: project_status_insert_input!

    """upsert condition"""
    on_conflict: project_status_on_conflict
  ): project_status

  """
  insert data into the table: "projects"
  """
  insert_projects(
    """the rows to be inserted"""
    objects: [projects_insert_input!]!

    """upsert condition"""
    on_conflict: projects_on_conflict
  ): projects_mutation_response

  """
  insert a single row into the table: "projects"
  """
  insert_projects_one(
    """the row to be inserted"""
    object: projects_insert_input!

    """upsert condition"""
    on_conflict: projects_on_conflict
  ): projects

  """
  update data of the table: "identity.parties"
  """
  update_identity_parties(
    """increments the numeric columns with given value of the filtered values"""
    _inc: identity_parties_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: identity_parties_set_input

    """filter the rows which have to be updated"""
    where: identity_parties_bool_exp!
  ): identity_parties_mutation_response

  """
  update single row of the table: "identity.parties"
  """
  update_identity_parties_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: identity_parties_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: identity_parties_set_input
    pk_columns: identity_parties_pk_columns_input!
  ): identity_parties

  """
  update multiples rows of table: "identity.parties"
  """
  update_identity_parties_many(
    """updates to execute, in order"""
    updates: [identity_parties_updates!]!
  ): [identity_parties_mutation_response]

  """
  update data of the table: "identity.party_roles"
  """
  update_identity_party_roles(
    """increments the numeric columns with given value of the filtered values"""
    _inc: identity_party_roles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: identity_party_roles_set_input

    """filter the rows which have to be updated"""
    where: identity_party_roles_bool_exp!
  ): identity_party_roles_mutation_response

  """
  update single row of the table: "identity.party_roles"
  """
  update_identity_party_roles_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: identity_party_roles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: identity_party_roles_set_input
    pk_columns: identity_party_roles_pk_columns_input!
  ): identity_party_roles

  """
  update multiples rows of table: "identity.party_roles"
  """
  update_identity_party_roles_many(
    """updates to execute, in order"""
    updates: [identity_party_roles_updates!]!
  ): [identity_party_roles_mutation_response]

  """
  update data of the table: "identity.role_type"
  """
  update_identity_role_type(
    """sets the columns of the filtered rows to the given values"""
    _set: identity_role_type_set_input

    """filter the rows which have to be updated"""
    where: identity_role_type_bool_exp!
  ): identity_role_type_mutation_response

  """
  update single row of the table: "identity.role_type"
  """
  update_identity_role_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: identity_role_type_set_input
    pk_columns: identity_role_type_pk_columns_input!
  ): identity_role_type

  """
  update multiples rows of table: "identity.role_type"
  """
  update_identity_role_type_many(
    """updates to execute, in order"""
    updates: [identity_role_type_updates!]!
  ): [identity_role_type_mutation_response]

  """
  update data of the table: "project_assignments"
  """
  update_project_assignments(
    """increments the numeric columns with given value of the filtered values"""
    _inc: project_assignments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: project_assignments_set_input

    """filter the rows which have to be updated"""
    where: project_assignments_bool_exp!
  ): project_assignments_mutation_response

  """
  update single row of the table: "project_assignments"
  """
  update_project_assignments_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: project_assignments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: project_assignments_set_input
    pk_columns: project_assignments_pk_columns_input!
  ): project_assignments

  """
  update multiples rows of table: "project_assignments"
  """
  update_project_assignments_many(
    """updates to execute, in order"""
    updates: [project_assignments_updates!]!
  ): [project_assignments_mutation_response]

  """
  update data of the table: "project_status"
  """
  update_project_status(
    """sets the columns of the filtered rows to the given values"""
    _set: project_status_set_input

    """filter the rows which have to be updated"""
    where: project_status_bool_exp!
  ): project_status_mutation_response

  """
  update single row of the table: "project_status"
  """
  update_project_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: project_status_set_input
    pk_columns: project_status_pk_columns_input!
  ): project_status

  """
  update multiples rows of table: "project_status"
  """
  update_project_status_many(
    """updates to execute, in order"""
    updates: [project_status_updates!]!
  ): [project_status_mutation_response]

  """
  update data of the table: "projects"
  """
  update_projects(
    """increments the numeric columns with given value of the filtered values"""
    _inc: projects_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input

    """filter the rows which have to be updated"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  update single row of the table: "projects"
  """
  update_projects_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: projects_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input
    pk_columns: projects_pk_columns_input!
  ): projects

  """
  update multiples rows of table: "projects"
  """
  update_projects_many(
    """updates to execute, in order"""
    updates: [projects_updates!]!
  ): [projects_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "project_assignments"
"""
type project_assignments {
  """An object relationship"""
  party_role: identity_party_roles!
  party_role_id: Int!

  """An object relationship"""
  project: projects!
  project_id: Int!
}

"""
aggregated selection of "project_assignments"
"""
type project_assignments_aggregate {
  aggregate: project_assignments_aggregate_fields
  nodes: [project_assignments!]!
}

input project_assignments_aggregate_bool_exp {
  count: project_assignments_aggregate_bool_exp_count
}

input project_assignments_aggregate_bool_exp_count {
  arguments: [project_assignments_select_column!]
  distinct: Boolean
  filter: project_assignments_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "project_assignments"
"""
type project_assignments_aggregate_fields {
  avg: project_assignments_avg_fields
  count(columns: [project_assignments_select_column!], distinct: Boolean): Int!
  max: project_assignments_max_fields
  min: project_assignments_min_fields
  stddev: project_assignments_stddev_fields
  stddev_pop: project_assignments_stddev_pop_fields
  stddev_samp: project_assignments_stddev_samp_fields
  sum: project_assignments_sum_fields
  var_pop: project_assignments_var_pop_fields
  var_samp: project_assignments_var_samp_fields
  variance: project_assignments_variance_fields
}

"""
order by aggregate values of table "project_assignments"
"""
input project_assignments_aggregate_order_by {
  avg: project_assignments_avg_order_by
  count: order_by
  max: project_assignments_max_order_by
  min: project_assignments_min_order_by
  stddev: project_assignments_stddev_order_by
  stddev_pop: project_assignments_stddev_pop_order_by
  stddev_samp: project_assignments_stddev_samp_order_by
  sum: project_assignments_sum_order_by
  var_pop: project_assignments_var_pop_order_by
  var_samp: project_assignments_var_samp_order_by
  variance: project_assignments_variance_order_by
}

"""
input type for inserting array relation for remote table "project_assignments"
"""
input project_assignments_arr_rel_insert_input {
  data: [project_assignments_insert_input!]!

  """upsert condition"""
  on_conflict: project_assignments_on_conflict
}

"""aggregate avg on columns"""
type project_assignments_avg_fields {
  party_role_id: Float
  project_id: Float
}

"""
order by avg() on columns of table "project_assignments"
"""
input project_assignments_avg_order_by {
  party_role_id: order_by
  project_id: order_by
}

"""
Boolean expression to filter rows from the table "project_assignments". All fields are combined with a logical 'AND'.
"""
input project_assignments_bool_exp {
  _and: [project_assignments_bool_exp!]
  _not: project_assignments_bool_exp
  _or: [project_assignments_bool_exp!]
  party_role: identity_party_roles_bool_exp
  party_role_id: Int_comparison_exp
  project: projects_bool_exp
  project_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "project_assignments"
"""
enum project_assignments_constraint {
  """
  unique or primary key constraint on columns "project_id", "party_role_id"
  """
  project_assignments_pkey
}

"""
input type for incrementing numeric columns in table "project_assignments"
"""
input project_assignments_inc_input {
  party_role_id: Int
  project_id: Int
}

"""
input type for inserting data into table "project_assignments"
"""
input project_assignments_insert_input {
  party_role: identity_party_roles_obj_rel_insert_input
  party_role_id: Int
  project: projects_obj_rel_insert_input
  project_id: Int
}

"""aggregate max on columns"""
type project_assignments_max_fields {
  party_role_id: Int
  project_id: Int
}

"""
order by max() on columns of table "project_assignments"
"""
input project_assignments_max_order_by {
  party_role_id: order_by
  project_id: order_by
}

"""aggregate min on columns"""
type project_assignments_min_fields {
  party_role_id: Int
  project_id: Int
}

"""
order by min() on columns of table "project_assignments"
"""
input project_assignments_min_order_by {
  party_role_id: order_by
  project_id: order_by
}

"""
response of any mutation on the table "project_assignments"
"""
type project_assignments_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [project_assignments!]!
}

"""
on_conflict condition type for table "project_assignments"
"""
input project_assignments_on_conflict {
  constraint: project_assignments_constraint!
  update_columns: [project_assignments_update_column!]! = []
  where: project_assignments_bool_exp
}

"""Ordering options when selecting data from "project_assignments"."""
input project_assignments_order_by {
  party_role: identity_party_roles_order_by
  party_role_id: order_by
  project: projects_order_by
  project_id: order_by
}

"""primary key columns input for table: project_assignments"""
input project_assignments_pk_columns_input {
  party_role_id: Int!
  project_id: Int!
}

"""
select columns of table "project_assignments"
"""
enum project_assignments_select_column {
  """column name"""
  party_role_id

  """column name"""
  project_id
}

"""
input type for updating data in table "project_assignments"
"""
input project_assignments_set_input {
  party_role_id: Int
  project_id: Int
}

"""aggregate stddev on columns"""
type project_assignments_stddev_fields {
  party_role_id: Float
  project_id: Float
}

"""
order by stddev() on columns of table "project_assignments"
"""
input project_assignments_stddev_order_by {
  party_role_id: order_by
  project_id: order_by
}

"""aggregate stddev_pop on columns"""
type project_assignments_stddev_pop_fields {
  party_role_id: Float
  project_id: Float
}

"""
order by stddev_pop() on columns of table "project_assignments"
"""
input project_assignments_stddev_pop_order_by {
  party_role_id: order_by
  project_id: order_by
}

"""aggregate stddev_samp on columns"""
type project_assignments_stddev_samp_fields {
  party_role_id: Float
  project_id: Float
}

"""
order by stddev_samp() on columns of table "project_assignments"
"""
input project_assignments_stddev_samp_order_by {
  party_role_id: order_by
  project_id: order_by
}

"""
Streaming cursor of the table "project_assignments"
"""
input project_assignments_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: project_assignments_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input project_assignments_stream_cursor_value_input {
  party_role_id: Int
  project_id: Int
}

"""aggregate sum on columns"""
type project_assignments_sum_fields {
  party_role_id: Int
  project_id: Int
}

"""
order by sum() on columns of table "project_assignments"
"""
input project_assignments_sum_order_by {
  party_role_id: order_by
  project_id: order_by
}

"""
update columns of table "project_assignments"
"""
enum project_assignments_update_column {
  """column name"""
  party_role_id

  """column name"""
  project_id
}

input project_assignments_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: project_assignments_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: project_assignments_set_input

  """filter the rows which have to be updated"""
  where: project_assignments_bool_exp!
}

"""aggregate var_pop on columns"""
type project_assignments_var_pop_fields {
  party_role_id: Float
  project_id: Float
}

"""
order by var_pop() on columns of table "project_assignments"
"""
input project_assignments_var_pop_order_by {
  party_role_id: order_by
  project_id: order_by
}

"""aggregate var_samp on columns"""
type project_assignments_var_samp_fields {
  party_role_id: Float
  project_id: Float
}

"""
order by var_samp() on columns of table "project_assignments"
"""
input project_assignments_var_samp_order_by {
  party_role_id: order_by
  project_id: order_by
}

"""aggregate variance on columns"""
type project_assignments_variance_fields {
  party_role_id: Float
  project_id: Float
}

"""
order by variance() on columns of table "project_assignments"
"""
input project_assignments_variance_order_by {
  party_role_id: order_by
  project_id: order_by
}

"""
columns and relationships of "project_status"
"""
type project_status {
  description: String

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!
  value: String!
}

"""
aggregated selection of "project_status"
"""
type project_status_aggregate {
  aggregate: project_status_aggregate_fields
  nodes: [project_status!]!
}

"""
aggregate fields of "project_status"
"""
type project_status_aggregate_fields {
  count(columns: [project_status_select_column!], distinct: Boolean): Int!
  max: project_status_max_fields
  min: project_status_min_fields
}

"""
Boolean expression to filter rows from the table "project_status". All fields are combined with a logical 'AND'.
"""
input project_status_bool_exp {
  _and: [project_status_bool_exp!]
  _not: project_status_bool_exp
  _or: [project_status_bool_exp!]
  description: String_comparison_exp
  projects: projects_bool_exp
  projects_aggregate: projects_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "project_status"
"""
enum project_status_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  project_status_pkey
}

enum project_status_enum {
  """Cancelled"""
  Cancelled

  """Completed"""
  Completed

  """In Progress"""
  InProgress

  """Not Started"""
  NotStarted

  """On Hold"""
  OnHold
}

"""
Boolean expression to compare columns of type "project_status_enum". All fields are combined with logical 'AND'.
"""
input project_status_enum_comparison_exp {
  _eq: project_status_enum
  _in: [project_status_enum!]
  _is_null: Boolean
  _neq: project_status_enum
  _nin: [project_status_enum!]
}

"""
input type for inserting data into table "project_status"
"""
input project_status_insert_input {
  description: String
  projects: projects_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type project_status_max_fields {
  description: String
  value: String
}

"""aggregate min on columns"""
type project_status_min_fields {
  description: String
  value: String
}

"""
response of any mutation on the table "project_status"
"""
type project_status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [project_status!]!
}

"""
input type for inserting object relation for remote table "project_status"
"""
input project_status_obj_rel_insert_input {
  data: project_status_insert_input!

  """upsert condition"""
  on_conflict: project_status_on_conflict
}

"""
on_conflict condition type for table "project_status"
"""
input project_status_on_conflict {
  constraint: project_status_constraint!
  update_columns: [project_status_update_column!]! = []
  where: project_status_bool_exp
}

"""Ordering options when selecting data from "project_status"."""
input project_status_order_by {
  description: order_by
  projects_aggregate: projects_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: project_status"""
input project_status_pk_columns_input {
  value: String!
}

"""
select columns of table "project_status"
"""
enum project_status_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "project_status"
"""
input project_status_set_input {
  description: String
  value: String
}

"""
Streaming cursor of the table "project_status"
"""
input project_status_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: project_status_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input project_status_stream_cursor_value_input {
  description: String
  value: String
}

"""
update columns of table "project_status"
"""
enum project_status_update_column {
  """column name"""
  description

  """column name"""
  value
}

input project_status_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: project_status_set_input

  """filter the rows which have to be updated"""
  where: project_status_bool_exp!
}

"""
columns and relationships of "projects"
"""
type projects {
  created_at: timestamptz
  description: String
  end_date: date
  id: Int!
  name: String!
  owner: Int

  """An object relationship"""
  owner_party: identity_parties

  """An array relationship"""
  project_assignments(
    """distinct select on columns"""
    distinct_on: [project_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_assignments_order_by!]

    """filter the rows returned"""
    where: project_assignments_bool_exp
  ): [project_assignments!]!

  """An aggregate relationship"""
  project_assignments_aggregate(
    """distinct select on columns"""
    distinct_on: [project_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_assignments_order_by!]

    """filter the rows returned"""
    where: project_assignments_bool_exp
  ): project_assignments_aggregate!

  """An object relationship"""
  project_status: project_status
  start_date: date
  status: project_status_enum
  updated_at: timestamptz
}

"""
aggregated selection of "projects"
"""
type projects_aggregate {
  aggregate: projects_aggregate_fields
  nodes: [projects!]!
}

input projects_aggregate_bool_exp {
  count: projects_aggregate_bool_exp_count
}

input projects_aggregate_bool_exp_count {
  arguments: [projects_select_column!]
  distinct: Boolean
  filter: projects_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "projects"
"""
type projects_aggregate_fields {
  avg: projects_avg_fields
  count(columns: [projects_select_column!], distinct: Boolean): Int!
  max: projects_max_fields
  min: projects_min_fields
  stddev: projects_stddev_fields
  stddev_pop: projects_stddev_pop_fields
  stddev_samp: projects_stddev_samp_fields
  sum: projects_sum_fields
  var_pop: projects_var_pop_fields
  var_samp: projects_var_samp_fields
  variance: projects_variance_fields
}

"""
order by aggregate values of table "projects"
"""
input projects_aggregate_order_by {
  avg: projects_avg_order_by
  count: order_by
  max: projects_max_order_by
  min: projects_min_order_by
  stddev: projects_stddev_order_by
  stddev_pop: projects_stddev_pop_order_by
  stddev_samp: projects_stddev_samp_order_by
  sum: projects_sum_order_by
  var_pop: projects_var_pop_order_by
  var_samp: projects_var_samp_order_by
  variance: projects_variance_order_by
}

"""
input type for inserting array relation for remote table "projects"
"""
input projects_arr_rel_insert_input {
  data: [projects_insert_input!]!

  """upsert condition"""
  on_conflict: projects_on_conflict
}

"""aggregate avg on columns"""
type projects_avg_fields {
  id: Float
  owner: Float
}

"""
order by avg() on columns of table "projects"
"""
input projects_avg_order_by {
  id: order_by
  owner: order_by
}

"""
Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
"""
input projects_bool_exp {
  _and: [projects_bool_exp!]
  _not: projects_bool_exp
  _or: [projects_bool_exp!]
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  end_date: date_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  owner: Int_comparison_exp
  owner_party: identity_parties_bool_exp
  project_assignments: project_assignments_bool_exp
  project_assignments_aggregate: project_assignments_aggregate_bool_exp
  project_status: project_status_bool_exp
  start_date: date_comparison_exp
  status: project_status_enum_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "projects"
"""
enum projects_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  projects_pkey
}

"""
input type for incrementing numeric columns in table "projects"
"""
input projects_inc_input {
  id: Int
  owner: Int
}

"""
input type for inserting data into table "projects"
"""
input projects_insert_input {
  created_at: timestamptz
  description: String
  end_date: date
  id: Int
  name: String
  owner: Int
  owner_party: identity_parties_obj_rel_insert_input
  project_assignments: project_assignments_arr_rel_insert_input
  project_status: project_status_obj_rel_insert_input
  start_date: date
  status: project_status_enum
  updated_at: timestamptz
}

"""aggregate max on columns"""
type projects_max_fields {
  created_at: timestamptz
  description: String
  end_date: date
  id: Int
  name: String
  owner: Int
  start_date: date
  updated_at: timestamptz
}

"""
order by max() on columns of table "projects"
"""
input projects_max_order_by {
  created_at: order_by
  description: order_by
  end_date: order_by
  id: order_by
  name: order_by
  owner: order_by
  start_date: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type projects_min_fields {
  created_at: timestamptz
  description: String
  end_date: date
  id: Int
  name: String
  owner: Int
  start_date: date
  updated_at: timestamptz
}

"""
order by min() on columns of table "projects"
"""
input projects_min_order_by {
  created_at: order_by
  description: order_by
  end_date: order_by
  id: order_by
  name: order_by
  owner: order_by
  start_date: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "projects"
"""
type projects_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [projects!]!
}

"""
input type for inserting object relation for remote table "projects"
"""
input projects_obj_rel_insert_input {
  data: projects_insert_input!

  """upsert condition"""
  on_conflict: projects_on_conflict
}

"""
on_conflict condition type for table "projects"
"""
input projects_on_conflict {
  constraint: projects_constraint!
  update_columns: [projects_update_column!]! = []
  where: projects_bool_exp
}

"""Ordering options when selecting data from "projects"."""
input projects_order_by {
  created_at: order_by
  description: order_by
  end_date: order_by
  id: order_by
  name: order_by
  owner: order_by
  owner_party: identity_parties_order_by
  project_assignments_aggregate: project_assignments_aggregate_order_by
  project_status: project_status_order_by
  start_date: order_by
  status: order_by
  updated_at: order_by
}

"""primary key columns input for table: projects"""
input projects_pk_columns_input {
  id: Int!
}

"""
select columns of table "projects"
"""
enum projects_select_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  end_date

  """column name"""
  id

  """column name"""
  name

  """column name"""
  owner

  """column name"""
  start_date

  """column name"""
  status

  """column name"""
  updated_at
}

"""
input type for updating data in table "projects"
"""
input projects_set_input {
  created_at: timestamptz
  description: String
  end_date: date
  id: Int
  name: String
  owner: Int
  start_date: date
  status: project_status_enum
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type projects_stddev_fields {
  id: Float
  owner: Float
}

"""
order by stddev() on columns of table "projects"
"""
input projects_stddev_order_by {
  id: order_by
  owner: order_by
}

"""aggregate stddev_pop on columns"""
type projects_stddev_pop_fields {
  id: Float
  owner: Float
}

"""
order by stddev_pop() on columns of table "projects"
"""
input projects_stddev_pop_order_by {
  id: order_by
  owner: order_by
}

"""aggregate stddev_samp on columns"""
type projects_stddev_samp_fields {
  id: Float
  owner: Float
}

"""
order by stddev_samp() on columns of table "projects"
"""
input projects_stddev_samp_order_by {
  id: order_by
  owner: order_by
}

"""
Streaming cursor of the table "projects"
"""
input projects_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: projects_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input projects_stream_cursor_value_input {
  created_at: timestamptz
  description: String
  end_date: date
  id: Int
  name: String
  owner: Int
  start_date: date
  status: project_status_enum
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type projects_sum_fields {
  id: Int
  owner: Int
}

"""
order by sum() on columns of table "projects"
"""
input projects_sum_order_by {
  id: order_by
  owner: order_by
}

"""
update columns of table "projects"
"""
enum projects_update_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  end_date

  """column name"""
  id

  """column name"""
  name

  """column name"""
  owner

  """column name"""
  start_date

  """column name"""
  status

  """column name"""
  updated_at
}

input projects_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: projects_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: projects_set_input

  """filter the rows which have to be updated"""
  where: projects_bool_exp!
}

"""aggregate var_pop on columns"""
type projects_var_pop_fields {
  id: Float
  owner: Float
}

"""
order by var_pop() on columns of table "projects"
"""
input projects_var_pop_order_by {
  id: order_by
  owner: order_by
}

"""aggregate var_samp on columns"""
type projects_var_samp_fields {
  id: Float
  owner: Float
}

"""
order by var_samp() on columns of table "projects"
"""
input projects_var_samp_order_by {
  id: order_by
  owner: order_by
}

"""aggregate variance on columns"""
type projects_variance_fields {
  id: Float
  owner: Float
}

"""
order by variance() on columns of table "projects"
"""
input projects_variance_order_by {
  id: order_by
  owner: order_by
}

type query_root {
  """
  fetch data from the table: "identity.parties"
  """
  identity_parties(
    """distinct select on columns"""
    distinct_on: [identity_parties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_parties_order_by!]

    """filter the rows returned"""
    where: identity_parties_bool_exp
  ): [identity_parties!]!

  """
  fetch aggregated fields from the table: "identity.parties"
  """
  identity_parties_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_parties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_parties_order_by!]

    """filter the rows returned"""
    where: identity_parties_bool_exp
  ): identity_parties_aggregate!

  """
  fetch data from the table: "identity.parties" using primary key columns
  """
  identity_parties_by_pk(party_id: Int!): identity_parties

  """
  fetch data from the table: "identity.party_roles"
  """
  identity_party_roles(
    """distinct select on columns"""
    distinct_on: [identity_party_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_party_roles_order_by!]

    """filter the rows returned"""
    where: identity_party_roles_bool_exp
  ): [identity_party_roles!]!

  """
  fetch aggregated fields from the table: "identity.party_roles"
  """
  identity_party_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_party_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_party_roles_order_by!]

    """filter the rows returned"""
    where: identity_party_roles_bool_exp
  ): identity_party_roles_aggregate!

  """
  fetch data from the table: "identity.party_roles" using primary key columns
  """
  identity_party_roles_by_pk(party_role_id: Int!): identity_party_roles

  """
  fetch data from the table: "identity.role_type"
  """
  identity_role_type(
    """distinct select on columns"""
    distinct_on: [identity_role_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_role_type_order_by!]

    """filter the rows returned"""
    where: identity_role_type_bool_exp
  ): [identity_role_type!]!

  """
  fetch aggregated fields from the table: "identity.role_type"
  """
  identity_role_type_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_role_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_role_type_order_by!]

    """filter the rows returned"""
    where: identity_role_type_bool_exp
  ): identity_role_type_aggregate!

  """
  fetch data from the table: "identity.role_type" using primary key columns
  """
  identity_role_type_by_pk(value: String!): identity_role_type

  """An array relationship"""
  project_assignments(
    """distinct select on columns"""
    distinct_on: [project_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_assignments_order_by!]

    """filter the rows returned"""
    where: project_assignments_bool_exp
  ): [project_assignments!]!

  """An aggregate relationship"""
  project_assignments_aggregate(
    """distinct select on columns"""
    distinct_on: [project_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_assignments_order_by!]

    """filter the rows returned"""
    where: project_assignments_bool_exp
  ): project_assignments_aggregate!

  """
  fetch data from the table: "project_assignments" using primary key columns
  """
  project_assignments_by_pk(party_role_id: Int!, project_id: Int!): project_assignments

  """
  fetch data from the table: "project_status"
  """
  project_status(
    """distinct select on columns"""
    distinct_on: [project_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_status_order_by!]

    """filter the rows returned"""
    where: project_status_bool_exp
  ): [project_status!]!

  """
  fetch aggregated fields from the table: "project_status"
  """
  project_status_aggregate(
    """distinct select on columns"""
    distinct_on: [project_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_status_order_by!]

    """filter the rows returned"""
    where: project_status_bool_exp
  ): project_status_aggregate!

  """fetch data from the table: "project_status" using primary key columns"""
  project_status_by_pk(value: String!): project_status

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(id: Int!): projects
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "identity.parties"
  """
  identity_parties(
    """distinct select on columns"""
    distinct_on: [identity_parties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_parties_order_by!]

    """filter the rows returned"""
    where: identity_parties_bool_exp
  ): [identity_parties!]!

  """
  fetch aggregated fields from the table: "identity.parties"
  """
  identity_parties_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_parties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_parties_order_by!]

    """filter the rows returned"""
    where: identity_parties_bool_exp
  ): identity_parties_aggregate!

  """
  fetch data from the table: "identity.parties" using primary key columns
  """
  identity_parties_by_pk(party_id: Int!): identity_parties

  """
  fetch data from the table in a streaming manner: "identity.parties"
  """
  identity_parties_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [identity_parties_stream_cursor_input]!

    """filter the rows returned"""
    where: identity_parties_bool_exp
  ): [identity_parties!]!

  """
  fetch data from the table: "identity.party_roles"
  """
  identity_party_roles(
    """distinct select on columns"""
    distinct_on: [identity_party_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_party_roles_order_by!]

    """filter the rows returned"""
    where: identity_party_roles_bool_exp
  ): [identity_party_roles!]!

  """
  fetch aggregated fields from the table: "identity.party_roles"
  """
  identity_party_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_party_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_party_roles_order_by!]

    """filter the rows returned"""
    where: identity_party_roles_bool_exp
  ): identity_party_roles_aggregate!

  """
  fetch data from the table: "identity.party_roles" using primary key columns
  """
  identity_party_roles_by_pk(party_role_id: Int!): identity_party_roles

  """
  fetch data from the table in a streaming manner: "identity.party_roles"
  """
  identity_party_roles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [identity_party_roles_stream_cursor_input]!

    """filter the rows returned"""
    where: identity_party_roles_bool_exp
  ): [identity_party_roles!]!

  """
  fetch data from the table: "identity.role_type"
  """
  identity_role_type(
    """distinct select on columns"""
    distinct_on: [identity_role_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_role_type_order_by!]

    """filter the rows returned"""
    where: identity_role_type_bool_exp
  ): [identity_role_type!]!

  """
  fetch aggregated fields from the table: "identity.role_type"
  """
  identity_role_type_aggregate(
    """distinct select on columns"""
    distinct_on: [identity_role_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identity_role_type_order_by!]

    """filter the rows returned"""
    where: identity_role_type_bool_exp
  ): identity_role_type_aggregate!

  """
  fetch data from the table: "identity.role_type" using primary key columns
  """
  identity_role_type_by_pk(value: String!): identity_role_type

  """
  fetch data from the table in a streaming manner: "identity.role_type"
  """
  identity_role_type_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [identity_role_type_stream_cursor_input]!

    """filter the rows returned"""
    where: identity_role_type_bool_exp
  ): [identity_role_type!]!

  """An array relationship"""
  project_assignments(
    """distinct select on columns"""
    distinct_on: [project_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_assignments_order_by!]

    """filter the rows returned"""
    where: project_assignments_bool_exp
  ): [project_assignments!]!

  """An aggregate relationship"""
  project_assignments_aggregate(
    """distinct select on columns"""
    distinct_on: [project_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_assignments_order_by!]

    """filter the rows returned"""
    where: project_assignments_bool_exp
  ): project_assignments_aggregate!

  """
  fetch data from the table: "project_assignments" using primary key columns
  """
  project_assignments_by_pk(party_role_id: Int!, project_id: Int!): project_assignments

  """
  fetch data from the table in a streaming manner: "project_assignments"
  """
  project_assignments_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [project_assignments_stream_cursor_input]!

    """filter the rows returned"""
    where: project_assignments_bool_exp
  ): [project_assignments!]!

  """
  fetch data from the table: "project_status"
  """
  project_status(
    """distinct select on columns"""
    distinct_on: [project_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_status_order_by!]

    """filter the rows returned"""
    where: project_status_bool_exp
  ): [project_status!]!

  """
  fetch aggregated fields from the table: "project_status"
  """
  project_status_aggregate(
    """distinct select on columns"""
    distinct_on: [project_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [project_status_order_by!]

    """filter the rows returned"""
    where: project_status_bool_exp
  ): project_status_aggregate!

  """fetch data from the table: "project_status" using primary key columns"""
  project_status_by_pk(value: String!): project_status

  """
  fetch data from the table in a streaming manner: "project_status"
  """
  project_status_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [project_status_stream_cursor_input]!

    """filter the rows returned"""
    where: project_status_bool_exp
  ): [project_status!]!

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """An aggregate relationship"""
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(id: Int!): projects

  """
  fetch data from the table in a streaming manner: "projects"
  """
  projects_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [projects_stream_cursor_input]!

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

